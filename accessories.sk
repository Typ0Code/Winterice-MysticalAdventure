 


command /accessories:
	aliases: accessory, accesory, accesories, gear, mygear, playergear, trinkets
	permission: core.accessories
	trigger:
		OpenAccessoriesMenu(sender)







every 5 seconds:
	if {players::*} is set:
		loop {players::*}:
			RefreshAccessories5(loop-value)

function RefreshAccessories5(player: player):
	loop 5 times:
		RefreshAccessories({_player})
		wait 1 second




function RefreshAccessories(player: player):

	set {_xx} to {v83hj5}
	set {_aa::*} to {_xx} split at ""
	if "%{_aa::16}%%{_aa::17}%" parsed as integer is not matchingVariables():
		stop

	#	Aurelium Skills Stats
	set {_strength} to 0
	set {_health} to 0
	set {_regeneration} to 0
	set {_luck} to 0
	set {_wisdom} to 0
	set {_toughness} to 0
	set {_speed} to 0



	#	Custom Bonuses
#	set {_movement_speed} to 0
	set {_fuel} to 0
	set {_oxygen} to 0
	delete {_night_vision}
	delete {_haste}



	#	Check Gear and add up stats
	loop 4 times:
		if GetAccessorySlot({_player}, loop-number) is set:
			set {_item} to GetAccessorySlot({_player}, loop-number)
			
			#	Grab item stats
			loop {-stats::*}:
				if {forge::item::%{_item}%::%loop-value-2%} is set:
					if {forge::item::%{_item}%::%loop-value-2%} is a number:
						#	Handling fuel separately, since its effects cannot stack:
						if loop-value-2 is "fuel":
							if {_fuel} > 0:
								if {forge::item::%{_item}%::%loop-value-2%} > {_%loop-value-2%}:
									set {_%loop-value-2%} to {forge::item::%{_item}%::%loop-value-2%}
							else:
								set {_%loop-value-2%} to {forge::item::%{_item}%::%loop-value-2%}
						#	Handling numbers:
						else:
							add {forge::item::%{_item}%::%loop-value-2%} to {_%loop-value-2%}
					#	Handling non numerical stats (example: night vision, haste)
					else:
						set {_%loop-value-2%} to {forge::item::%{_item}%::%loop-value-2%}



	#	Applying Stats


	#	Aurelium Skill Stats:
	set {_basic_stats::*} to "strength" and "health" and "regeneration" and "luck" and "wisdom" and "toughness" and "speed"

	loop {_basic_stats::*}:
		set {_stat} to loop-value
		if metadata value "%{_stat}%" of {_player} is not {_%{_stat}%}:
			set metadata value "%{_stat}%" of {_player} to {_%{_stat}%}
			execute console command "sk modifier remove %{_player}% accessory_%{_stat}%"
			if {_%{_stat}%} is not 0:
				execute console command "sk modifier add %{_player}% %{_stat}% accessory_%{_stat}% %{_%{_stat}%}%"


	#	Night Vision
	if {_night_vision} is true:
		if {_player}'s gamemode is not creative:
			remove night vision from {_player}
			apply potion of night vision without any particles to {_player} for 1 day
			set metadata value "night_vision" of {_player} to true
	else:
		if metadata value "night_vision" of {_player} is true:
			remove night vision from {_player}
			delete metadata value "night_vision" of {_player}

	#	Haste
	if {_haste} is true:
		if {_player}'s gamemode is not creative:
			remove haste from {_player}
			apply potion of haste without any particles to {_player} for 1 day
			set metadata value "haste" of {_player} to true
	else:
		if metadata value "haste" of {_player} is true:
			remove haste from {_player}
			delete metadata value "haste" of {_player}


	#	Oxygen
	if {_oxygen} is set:
		if metadata value "submerged" of {_player} is true:
			if {_player} is not in water:
				delete metadata value "submerged" of {_player}
				remove water breathing from {_player}
		else:
			if {_player} is in water:
				set metadata value "submerged" of {_player} to true
				apply potion of water breathing without any particles to {_player} for Time("%{_oxygen}% seconds")


	#	Flight
	if {_fuel} > 0:
		AccessoryFlightCheck({_player}, {_fuel})







function GetAccessorySlot(player: player, slot: integer) :: string:
	loop {forge::accessories_list::*}:
		if {accessories::%uuid of {_player}%::items::%{_slot}%} is {item::%loop-value%}:
			return "%loop-value%"

function WearsAccessory(player: player, accessory: string) :: boolean:
	loop 4 times:
		if {accessories::%uuid of {_player}%::items::%loop-iteration%} is {item::%{_accessory}%}:
			return true

function GetAccessoryAttributes(player: player) :: objects:
	loop 4 times:
		set {_item} to GetCustomItemId({accessories::%uuid of {_player}%::items::%loop-iteration%})
		loop {-stats::*}:
			if {forge::item::%{_item}%::%loop-value-2%} is set:
				add loop-value-2 to {_all::*}
	return {_all::*}



function GetAccessory(item: item) :: string:
	loop {forge::accessories_list::*}:
		set {_accessory} to loop-value
		if {forge::item::%{_accessory}%::*} is set:
			if type of {_item} is type of {item::%{_accessory}%}:
				if custom model data of {_item} is custom model data of {item::%{_accessory}%}:
					return {_accessory}



function AccessoryFlightCheck(player: player, fuel: integer):
	if {_player}'s world contains "dungeons":
		stop
	loop 10 times:
		if {_player} is not flying:
			if {_player} is sneaking:
				if metadata value "fuel" of {_player} > 0:
					reset {_player}'s velocity
					set {_loc} to location of {_player}
					set pitch of {_loc} to 0
					set {_v} to vector from {_loc} to location 1 meter in front of {_loc}
					push {_player} upwards with speed 0.5
					push {_player} {_v} with speed 0.4
					set metadata value "fuel" of {_player} to metadata value "fuel" of {_player} - 1
					play sound "item.bucket.empty_lava" with volume 0.3 and pitch 2 at {_player}
					draw 5 flame at {_player} with offset vector(0, 0, 0) with extra 0.2
					draw 1 cloud at {_player} with offset vector(0, 0, 0) with extra 0.2

		if {_player} is on ground:
			set metadata value "fuel" of {_player} to {_fuel}

		wait 0.1 second


