on load:
	wait 10 seconds
	AmbientsReload()
	RegisterTags()

function RegisterTags():
	register an item tag named "skript:food" containing apple, golden apple, enchanted golden apple, melon slice, sweet berries, glow berries, chorus fruit, carrot, golden carrot, potato, baked potato, poisonous potato, beetroot, dried kelp, beef, cooked beef, porkchop, cooked porkchop, mutton, cooked mutton, chicken, cooked chicken, rabbit, cooked rabbit, cod, cooked cod, salmon, cooked salmon, tropical fish, pufferfish, bread, cookie, cake, mushroom stew, beetroot soup, rabbit stew, and pumpkin pie
#	register an item tag named "skript:metal_armor" containing chainmail helmet, chainmail chestplate, chainmail leggings, chainmail boots, iron helmet, iron chestplate, iron leggings, iron boots, golden helmet, golden chestplate, golden leggings, golden boots, diamond helmet, diamond chestplate, diamond leggings, diamond boots, netherite helmet, netherite chestplate, netherite leggings and netherite boots

command /ambientsreload:
	permission: admin
	trigger:
		AmbientsReload()

function AmbientsReload():
	load yaml "unlimited_adventures/Sounds/config.yml" as "config"
	load yaml "unlimited_adventures/Sounds/ambients.yml" as "sounds"
	load yaml "unlimited_adventures/Sounds/location_sounds.yml" as "location_sounds"


	if {ambients::*} is set:
		clear {ambients::*}
	clear {-ambients::*}

	set {-ambients::enabled} to yaml value "enabled" from "config"
	set {-ambients::biomes::forests::*} to yaml list "forest-biomes" from "config"
	set {-ambients::biomes::green::*} to yaml list "green-biomes" from "config"
	set {-ambients::biomes::arid::*} to yaml list "arid-biomes" from "config"
	set {-ambients::biomes::winter::*} to yaml list "winter-biomes" from "config"
	set {-ambients::biomes::high::*} to yaml list "high-biomes" from "config"
	set {-ambients::biomes::ocean::*} to yaml list "ocean-biomes" from "config"

	set {sounds::hotbar_slot_sound} to yaml value "hotbar_slot_sound" from "config"
	set {sounds::tool_draw_sound} to yaml value "tool_draw_sound" from "config"
	set {sounds::inventory_sounds} to yaml value "inventory_sounds" from "config"
	set {sounds::block_interact} to yaml value "block_interact" from "config"
	set {sounds::item_craft} to yaml value "item_craft" from "config"
	set {sounds::item_drop} to yaml value "item_drop" from "config"
	
	set {_nr1} to 0
	loop yaml node keys "" from "sounds":
		set {_sound} to loop-value
		set {_sound_name} to yaml value "%{_sound}%.sound" from "sounds"
		set {-ambients::%{_sound}%::sound} to yaml value "%{_sound}%.sound" from "sounds"
		
		if yaml list "%{_sound}%.worlds" from "sounds" is set:
			set {-ambients::%{_sound}%::worlds::*} to yaml list "%{_sound}%.worlds" from "sounds"
		if yaml list "%{_sound}%.biomes" from "sounds" is set:
			set {-ambients::%{_sound}%::biomes::*} to yaml list "%{_sound}%.biomes" from "sounds"
		if yaml list "%{_sound}%.levels" from "sounds" is set:
			set {-ambients::%{_sound}%::levels::*} to yaml list "%{_sound}%.levels" from "sounds"
		if yaml list "%{_sound}%.time_of_day" from "sounds" is set:
			set {-ambients::%{_sound}%::time_of_day::*} to yaml list "%{_sound}%.time_of_day" from "sounds"
		if yaml list "%{_sound}%.weather" from "sounds" is set:
			set {-ambients::%{_sound}%::weather::*} to yaml list "%{_sound}%.weather" from "sounds"
		set {_time} to yaml value "%{_sound}%.delay" from "sounds"
		set {-ambients::%{_sound}%::delay} to "%{_time}% seconds" parsed as timespan
		set {-ambients::%{_sound}%::amplitude} to yaml value "%{_sound}%.amplitude" from "sounds"
		if yaml value "%{_sound}%.volume" from "sounds" is set:
			set {-ambients::%{_sound}%::volume} to yaml value "%{_sound}%.volume" from "sounds"
		if yaml value "%{_sound}%.pitch" from "sounds" is set:
			set {-ambients::%{_sound}%::pitch} to yaml value "%{_sound}%.pitch" from "sounds"
		if yaml value "%{_sound}%.play_when_submerged" from "sounds" is set:
			set {-ambients::%{_name}%::play_when_submerged} to yaml value "%{_sound}%.play_when_submerged" from "sounds"
		if yaml value "%{_sound}%.prevent_stacking" from "sounds" is set:
			set {_time} to yaml value "%{_sound}%.prevent_stacking" from "sounds"
			set {-ambients::%{_sound}%::prevent_stacking} to "%{_time}% seconds" parsed as timespan
		add {_sound} to {-ambients::sounds::*}
		
		add 1 to {_nr1}
		if mod({_nr1}, 5) = 0:
			wait 1 tick

#	delete {-location_sounds::*}
	loop {-location_sounds::sounds::*}:
		set {_sound} to loop-value
#		send "&c%{-location_sounds::%{_sound}%::*}%" to all players
		delete {-location_sounds::%{_sound}%::*}
	delete {-location_sounds::sounds::*}

	loop yaml node keys "" from "location_sounds":
		set {_sound} to loop-value
		set {_sound_name} to yaml value "%{_sound}%.sound" from "location_sounds"
		delete {-location_sounds::%{_sound}%::*}
		set {-location_sounds::%{_sound}%::sound} to yaml value "%{_sound}%.sound" from "location_sounds"
		if yaml value "%{_sound}%.location" from "location_sounds" is set:
			set {_loc::*} to yaml value "%{_sound}%.location" from "location_sounds" split at ", "
			set {-location_sounds::%{_sound}%::location} to location({_loc::1} parsed as number, {_loc::2} parsed as number, {_loc::3} parsed as number, {_loc::4})
#			send "%{location_sounds::%{_sound}%::location}%" to all players
		set {_time} to yaml value "%{_sound}%.delay" from "location_sounds"
		set {-location_sounds::%{_sound}%::delay} to "%{_time}% seconds" parsed as timespan
		set {-location_sounds::%{_sound}%::amplitude} to yaml value "%{_sound}%.amplitude" from "location_sounds"
		if yaml value "%{_sound}%.volume" from "location_sounds" is set:
			set {-location_sounds::%{_sound}%::volume} to yaml value "%{_sound}%.volume" from "location_sounds"
		if yaml value "%{_sound}%.pitch" from "location_sounds" is set:
			set {-location_sounds::%{_sound}%::pitch} to yaml value "%{_sound}%.pitch" from "location_sounds"
		if yaml value "%{_sound}%.play_when_submerged" from "location_sounds" is set:
			set {-location_sounds::%{_name}%::play_when_submerged} to yaml value "%{_sound}%.play_when_submerged" from "location_sounds"
		add {_sound} to {-location_sounds::sounds::*}

		add 1 to {_nr2}
		if mod({_nr2}, 5) = 0:
			wait 1 tick

	set {-sound::wooden} to "item.crossbow.loading_end, 0.2, 1, 1.2"
	set {-sound::sword} to "custom.items.sword_unsheath, 0.3, 0.5, 1"
	set {-sound::pickaxe_or_shovel} to "item.bundle.drop_contents, 0.7, 0.8, 1"
	set {-sound::axe} to "custom.items.axe_unsheath, 0.8, 0.45, 1"
	set {-sound::hoe} to "item.bundle.drop_contents, 0.3, 0.8, 1"
	set {-sound::trident} to "custom.items.sword_unsheath, 0.7, 0.5, 1"
	set {-sound::mace} to "custom.items.axe_unsheath, 1.5, 0.45, 1"
	set {-sound::shield} to "block.fence_gate.close, 0.25, 0.7, 1"
	set {-sound::bow} to "item.crossbow.loading_end, 0.2, 1, 1.5"
	set {-sound::crossbow} to "item.crossbow.loading_end, 0.2, 1, 1.2"
	set {-sound::water_bucket} to "item.bucket.fill, 0.1, 1, 1"
	set {-sound::lava_bucket} to "item.bucket.fill_lava, 0.1, 0.5, 1"
	set {-sound::bucket_of_axolotl} to "item.bucket.fill_axolotl, 0.1, 0.5, 1"
	set {-sound::powder_snow_bucket} to "item.bucket.fill_powder_snow, 0.1, 0.5, 1"
	set {-sound::bucket_of_cod} to "item.bucket.fill_fish, 0.1, 0.5, 1"
	set {-sound::bucket_of_tadpole} to "item.bucket.fill_tadpole, 0.1, 0.5, 1"
	set {-sound::milk} to "item.bucket.fill, 0.1, 0.5, 1.5"
	set {-sound::bucket} to "item.armor.equip_iron, 0.1, 0.5, 1"
	set {-sound::potion} to "item.bottle.empty, 0.1, 0.5, 1"



	save yaml "config"
	save yaml "sounds"
	save yaml "location_sounds"

	if {-ambients::enabled} is true:
		loop {players::*}:
			if loop-value has permission "admin":
				send "&f &fAmbient Sounds config file has been reloaded! &a(Ambients Enabled)" to loop-value
	if {-ambients::enabled} is false:
		loop {players::*}:
			if loop-value has permission "admin":
				send "&f &fAmbient Sounds config file has been reloaded! &c(Ambients Disabled)" to loop-value


every second:
	loop {players::*}:
		AmbientTickPlayer(loop-value)
		LocationSoundsTickPlayer(loop-value)



function AmbientTickPlayer(player: player):
	if {-ambients::enabled} is false:
		stop
	if {player_setting::ambient_sounds::%uuid of {_player}%} is false:
		stop

	#	Don't play regular ambients in Wilderness Dungeons
	if IsInDungeon(location of {_player}) is true:
		stop

	set {_biome} to {_player}'s biome
	set {_world} to world of {_player}
	set {_weather} to weather in {_player}'s world
	set {_region} to "%region at {_player}%"
	replace all "in world %{_world}%" in {_region} with ""


	set {_level} to "surface"
	if y coordinate of {_player} > 64+90:
		set {_level} to "sky"
	if y coordinate of {_player} < 64-20:
		set {_level} to "underground"

	if {_region} contains "dungeon":
		set {_biome} to "dungeons"
		set {_level} to "surface"
		set {_outside} to false

	if {_region} contains "spawn":
#		set {_biome} to "spawn"
		set {_level} to "surface"
#		if y coordinate of {_player} > 100:
#			set {_level} to "sky"


	set {_current_time} to "night"
	if {_player}'s world's time > 5:00:
		set {_current_time} to "morning"
	if {_player}'s world's time > 10:00:
		set {_current_time} to "noon"
	if {_player}'s world's time > 16:00:
		set {_current_time} to "evening"
	if {_player}'s world's time > 20:00:
		set {_current_time} to "night"


	if {-ambients::sounds::*} is set:
		loop {-ambients::sounds::*}:
			set {_name} to loop-value
			set {_sound_name} to {-ambients::%{_name}%::sound}

#			if {-ambients::%{_name}%::play_when_submerged} is not true:
#				if block above {_player} is water or falling water:
#					stop sound {_sound_name} for {_player}

			if {-ambients::%{_name}%::worlds::*} is set:
				set {_worlds::*} to {-ambients::%{_name}%::worlds::*}
				if {_worlds::*} doesn't contain {_world}:
#					send "wrong world" to {_player}
					continue loop

			if BiomeCheck({_player}, {_name}) is false:
#				send "wrong biome" to {_player}
				continue loop

			if {-ambients::%{_name}%::levels::*} is set:
				set {_levels::*} to {-ambients::%{_name}%::levels::*}
				if {_levels::*} doesn't contain {_level}:
#					send "wrong level" to {_player}
					continue loop

			if {-ambients::%{_name}%::weather::*} is set:
				set {_weather::*} to {-ambients::%{_name}%::weather::*}
				if {_weather::*} doesn't contain "%{_weather}%":
#					send "wrong weather" to {_player}
					continue loop
			
			if {-ambients::%{_name}%::time_of_day::*} is set:
				set {_time_of_day::*} to {-ambients::%{_name}%::time_of_day::*}
				if {_time_of_day::*} doesn't contain {_current_time}:
#					send "wrong time" to {_player}
					continue loop
				if {_current_time} is "night":
					if syncPing() is not {varrr}*3:
						chance of 50%:
							continue loop

			if {-ambients::%{_name}%::play_when_submerged} is not true:
				if block above {_player} is water or falling water:
#					send "can't be submerged!" to {_player}
					continue loop

			if {-ambients::%{_name}%::prevent_stacking} is set:
				if difference between metadata value "ambients_lastsound_cooldown" of {_player} and now < {-ambients::%{_name}%::prevent_stacking}:
					continue loop

			set {_delay} to {-ambients::%{_name}%::delay}
			set {_amplitude} to {-ambients::%{_name}%::amplitude}
			
			set {_playsound} to false
			if metadata value "ambients_%{_name}%_cooldown" of {_player} is not set:
				chance of 20%:
					set {_playsound} to true
			else if difference between metadata value "ambients_%{_name}%_cooldown" of {_player} and now >= {_delay}:
				set {_playsound} to true
			if {_playsound} is true:
				set {_now} to now
				add "%random number between 0-{_amplitude} and {_amplitude}% seconds" parsed as timespan to {_now}
				set metadata value "ambients_lastsound_cooldown" of {_player} to {_now}
				set metadata value "ambients_%{_name}%_cooldown" of {_player} to {_now}

				set {_loc} to location of {_player}
				add random number between -10 and 10 to x coordinate of {_loc}
				add random number between 0 and 5 to y coordinate of {_loc}
				add random number between -10 and 10 to z coordinate of {_loc}
				set {_volume} to 1
				if {-ambients::%{_name}%::volume} is set:
					set {_volume} to {-ambients::%{_name}%::volume}
				set {_pitch} to 1
				if {-ambients::%{_name}%::pitch} is set:
					set {_pitch} to {-ambients::%{_name}%::pitch}
				set {_pitch} to random number between {_pitch}*0.9 and {_pitch}*1.1
				set {_range1} to 0-{_volume}*0.1
				set {_range2} to {_volume}*0.1
				play sound {_sound_name} in ambient category with volume ({_volume} + random number between {_range1} and {_range2}) and pitch {_pitch} at {_loc} to {_player}

#				send "%{_sound_name}% (%{_name}%)" to {_player}


function LocationSoundsTickPlayer(player: player):
	if {-ambients::enabled} is false:
		stop
	if {player_setting::ambient_sounds::%uuid of {_player}%} is false:
		stop



	if {-location_sounds::sounds::*} is set:
		loop {-location_sounds::sounds::*}:
			set {_name} to loop-value
			set {_sound_name} to {-location_sounds::%{_name}%::sound}


#			send "%world of {_player}% / %world of {-location_sounds::%{_name}%::location}%" to {_player}
			if world of {_player} is not world of {-location_sounds::%{_name}%::location}:
#				send "wrong world" to {_player}
				continue loop
			if distance between {-location_sounds::%{_name}%::location} and {_player} > 50:
#				send "wrong location" to {_player}
				continue loop

#			if {-location_sounds::%{_name}%::play_when_submerged} is not true:
#				if block above {_player} is water or falling water:
#					stop sound {_sound_name} for {_player}
#					continue loop

			set {_delay} to {-location_sounds::%{_name}%::delay}
			set {_amplitude} to {-location_sounds::%{_name}%::amplitude}
			
			set {_playsound} to false
			if metadata value "location_sounds_%{_name}%_cooldown" of {_player} is not set:
				chance of 20%:
					set {_playsound} to true
			else if difference between metadata value "location_sounds_%{_name}%_cooldown" of {_player} and now >= {_delay}:
				set {_playsound} to true
			if {_playsound} is true:
				set {_now} to now
				add "%random number between 0-{_amplitude} and {_amplitude}% seconds" parsed as timespan to {_now}
				set metadata value "location_sounds_%{_name}%_cooldown" of {_player} to {_now}

				set {_loc} to {-location_sounds::%{_name}%::location}
				add random number between -10 and 10 to x coordinate of {_loc}
				add random number between 0 and 5 to y coordinate of {_loc}
				add random number between -10 and 10 to z coordinate of {_loc}
				set {_volume} to 1
				if {-location_sounds::%{_name}%::volume} is set:
					set {_volume} to {-location_sounds::%{_name}%::volume}
				set {_pitch} to 1
				if {-location_sounds::%{_name}%::pitch} is set:
					set {_pitch} to {-location_sounds::%{_name}%::pitch}
				set {_pitch} to random integer between {_pitch}*0.9 and {_pitch}*1.1
				set {_range1} to 0-{_volume}*0.1
				set {_range2} to {_volume}*0.1
				play sound {_sound_name} in ambient category with volume ({_volume} + random number between {_range1} and {_range2}) and pitch {_pitch} at {_loc} to {_player}

#				send "%{_sound_name}% (%{_name}%)" to {_player}












function InCave(player: player) :: boolean:
	if world of {_player} is "dungeons":
		return false
	set {_y} to y coordinate of highest block at location of {_player}


	#	Depth
	if y coordinate of {_player} <= {_y}-15:
		set {_diff} to difference between {_y} and y coordinate of {_player}
		set {_force} to ({_diff}-14)/35
		if {_force} > 1:
			set {_force} to 1
		add {_force}/1.5 to {_score}

	#	Light
	set {_force} to sunlight level at {_player}
	set {_force} to (15 - {_force})/15
	add {_force}/2.5 to {_score}

	if {_score} >= 0.5:
		return true







function BiomeCheck(player: player, name: string) :: boolean:
	set {_biome_correct} to false

	if {-ambients::%{_name}%::biomes::*} is not set:
		set {_biome_correct} to true
		return {_biome_correct}

#	set {_biome} to {_player}'s biome
#	set {_biome} to "%biome key of block at {_player}%"
	set {_biome} to "%biome of block at {_player}%"
	replace all "minecraft:" with "" in {_biome}
	replace all "terralith:" with "t:" in {_biome}

	set {_world} to world of {_player}
	set {_region} to "%region at {_player}%"
	replace all " in world %{_world}%" in {_region} with ""
	if {_region} contains "dungeon":
		set {_biome} to "dungeons"
		set {_dungeon} to {_region}

	if {_region} contains "spawn":
		set {_biome} to "spawn"

	if InCave({_player}) is true:
		set {_biome} to "cave"

	
	set {_biomes::*} to {-ambients::%{_name}%::biomes::*}


	#	Checking if biomes list contains current biome, and doesn't exclude it:
	if {_biomes::*} contains "%{_biome}%":
		if {_biomes::*} doesn't contain "!%{_biome}%":
			set {_biome_correct} to true

	#	Checking if biomes list contains current dungeon, and doesn't exclude it:

	if "%{_biomes::*}%" contains "dungeon":
		if "%{_biomes::*}%" contains "%{_dungeon}%":
			if {_biomes::*} contains {_dungeon}:
				if {_biomes::*} doesn't contain "!%{_dungeon}%":
					set {_biome_correct} to true


	#	Checking if biomes list contains any of the biome groups:
	if {_biomes::*} contains "all forests" or "all forest biomes" or "forest biomes":
		if {-ambients::biomes::forests::*} contains "%{_biome}%":
			set {_biome_correct} to true
	if {_biomes::*} contains "all green" or "all green biomes" or "green biomes":
		if {-ambients::biomes::green::*} contains "%{_biome}%":
			set {_biome_correct} to true
	if {_biomes::*} contains "all winter" or "all winter biomes" or "winter biomes":
		if {-ambients::biomes::winter::*} contains "%{_biome}%":
			set {_biome_correct} to true
	if {_biomes::*} contains "all arid" or "all arid biomes" or "arid biomes":
		if {-ambients::biomes::arid::*} contains "%{_biome}%":
			set {_biome_correct} to true
	if {_biomes::*} contains "all high" or "all high biomes" or "high biomes":
		if {-ambients::biomes::high::*} contains "%{_biome}%":
			set {_biome_correct} to true
	if {_biomes::*} contains "all ocean" or "all ocean biomes" or "ocean biomes":
		if {-ambients::biomes::ocean::*} contains "%{_biome}%":
			set {_biome_correct} to true

	return {_biome_correct}






on step on grass block or dirt or coarse dirt:
	if player is sprinting:
		BirdsTakeoffRunningThroughForest(player)
	if block at player is tagged with minecraft tag "flowers":
		set {_type} to "plant"
	if block at player is short grass:
		set {_type} to "plant"
	if {_type} is "plant":
		chance of 25%:
			play sound "custom.bush_trampling" with volume random number between 0.3 and 0.5 and pitch random number between 0.9 and 1.4 at player
	if block at player is tall grass:
		chance of 50%:
			play sound "custom.bush_trampling" with volume random number between 0.5 and 0.7 and pitch random number between 0.6 and 1.1 at player



on break:
	if event-block is tagged with minecraft tag "logs":
		if block 4 meters above event-block is tagged with minecraft tag "leaves":
			BirdsTakeoffSound(player, location of event-block)
		if block 9 meters above event-block is tagged with minecraft tag "leaves":
			BirdsTakeoffSound(player, location of event-block)

function BirdsTakeoffSound(player: player, loc: location):
	if difference between metadata value "birds_takeoff_sound" of {_player} and now < 30 seconds:
		stop
	chance of 30%:
		set metadata value "birds_takeoff_sound" of {_player} to now
		set {_loc} to location 4 meters above {_loc}
		play sound "custom.birds_takeoff" with volume random number between 0.6 and 0.9 and pitch random number between 0.9 and 1.1 at {_loc}

function BirdsTakeoffRunningThroughForest(player: player):
	if difference between metadata value "birds_takeoff_sound" of {_player} and now < 30 seconds:
		stop
	if {-ambients::biomes::forests::*} contains "%{_player}'s biome%":
		chance of 5%:
			set metadata value "birds_takeoff_sound" of {_player} to now
			play sound "custom.birds_takeoff" with volume random number between 0.6 and 0.9 and pitch random number between 0.9 and 1.1 at location 4 meters above {_player}


on tool change:
	if {sounds::hotbar_slot_sound} is true:
		play sound "ui.button.click" with volume 0.1 and pitch 2 to player
	ToolDrawSound(player)

function ToolDrawSound(player: player):
	if {sounds::tool_draw_sound} is not true:
		stop
	wait 1 tick
	if tool of {_player} is tagged with minecraft tag "swords":
		set {_tool} to "sword"
	if tool of {_player} is tagged with minecraft tag "pickaxes":
		set {_tool} to "pickaxe_or_shovel"
	if tool of {_player} is tagged with minecraft tag "shovels":
		set {_tool} to "pickaxe_or_shovel"
	if tool of {_player} is tagged with minecraft tag "axes":
		set {_tool} to "axe"
	if tool of {_player} is tagged with minecraft tag "hoes":
		set {_tool} to "hoe"
	if tool of {_player} is fishing rod or carrot on a stick or warped fungus on a stick:
		set {_tool} to "wooden"

	set {_p_tool} to type of tool of {_player}
	if {_tool} is not set:
		set {_tool} to "%type of tool of {_player}%"
	replace all " " with "_" in {_tool}


	if {-sound::%{_tool}%} is set:
		if type of tool of {_player} is {_p_tool}:
			set {_sound::*} to {-sound::%{_tool}%} split at ", "
			wait "%{_sound::2}% second" parsed as timespan
			if type of tool of {_player} is {_p_tool}:
				if difference between metadata value "tool_draw_sound" of {_player} and now < 0.25 second:
					stop
				set metadata value "tool_draw_sound" of {_player} to now
				play sound {_sound::1} with volume {_sound::3} parsed as number and pitch {_sound::4} parsed as number at {_player}








on inventory click:
	set {_pass} to false
	set {_inv} to event-inventory
	set {_item} to event-item # Store item for passing to PlayItemSound

	if {_inv} is player inventory or workbench inventory or furnace inventory or barrel inventory or ender chest inventory:
		set {_pass} to true
	if player's current inventory is (metadata value "custom_items_menu" of player):
		if name of event-slot is not "&aNext Page →" or "&c← Previous Page":
			set {_pass} to true
	if player's current inventory is (metadata value "backpack_inventory" of player):
		set {_pass} to true
	if player's current inventory is (metadata value "accessories_menu" of player):
		if name of event-slot is not " ":
			if name of event-slot doesn't contain "About Gear" or "Previous Menu" or "Your Stats":
				set {_pass} to true
	
	if {_pass} is true:
		if event-slot is not air:
			PlayItemSound(player, GetClickedItem(event-item), {_item})
		else:
			wait 1 tick
			PlayItemSound(player, GetClickedItem(event-item), {_item})


on right click:
	if {sounds::block_interact} is true:
		if event-block is crafting table or stonecutter or cartography table or smithing table or grindstone or loom or furnace or smoker or blast furnace or anvil or chipped anvil or damaged anvil or enchanting table or brewing stand or beacon:
			play sound "ui.button.click" with volume 0.5 and pitch random number between 1.4 and 2 at block
	if player's tool is tagged with minecraft tag "spawn_eggs":
		if distance between player and target block < 3.8:
			play sound "entity.item.pickup" with volume 0.3 and pitch random number between 1.5 and 2 at target block

on craft:
	if {sounds::item_craft} is true:
		play sound "custom.craft_item" with volume 0.15 and pitch random number between 0.8 and 1.2 at player
on drop:
	if {sounds::item_drop} is true:
		play sound "entity.item.pickup" with volume 0.25 and pitch random number between 1.5 and 2 at player

function GetClickedItem(item: item) :: string:
	
	set {_type} to "unknown"

	if IsBackpack({_item}) is true:
		set {_type} to "backpack"

#	if {_item} is set:
#		if {_i1etem} is not air:
#			set {_type} to "unknown"
#		if IsBackpack({_item}) is true:
#			set {_type} to "backpack"


#	shears, spyglass, clock, compass, recovery compass, any horse armor, wolf armor, saddle, any bucket and bucket of tadpole
	if {_item} is tagged with minecraft tag "swords":
		return "tool"
	if {_item} is tagged with minecraft tag "pickaxes":
		return "tool"
	if {_item} is tagged with minecraft tag "axes":
		return "tool"
	if {_item} is tagged with minecraft tag "shovels":
		return "tool"
	if {_item} is tagged with minecraft tag "hoes":
		return "tool"

#	if {_item} is tagged with minecraft tag "skript:metal_armor":
#		return "tool"
	if {_item} is chainmail helmet or chainmail chestplate or chainmail leggings or chainmail boots or iron helmet or iron chestplate or iron leggings or iron boots or golden helmet or golden chestplate or golden leggings or golden boots or diamond helmet or diamond chestplate or diamond leggings or diamond boots or netherite helmet or netherite chestplate or netherite leggings or netherite boots:
		return "tool"

	if {_item} is bow or crossbow or shield or mace or trident or fishing rod or carrot on a stick or warped fungus on a stick or shears or spyglass or clock or compass or recovery compass or wolf armor or saddle:
		return "tool"

	if GetCustomItemId({_item}) contains "crystal":
		return "gem"


	#	Metal
	if {_item} is iron ingot or copper ingot or gold ingot or netherite ingot or heavy core or breeze rod or shulker shell or lantern or soul lantern or chain or anvil or chipped anvil or damaged anvil or bell or cauldron or furnace or blast furnace or smithing table or enchanting table or totem of undying or coal block or iron block or gold block:
		return "metal"
	if {_item} is tagged with minecraft tag "raw_ores":
		return "metal"
	if "%{_item}%" contains "smithing template":
		return "metal"
	if GetCustomItemId({_item}) contains "key":
		return "metal"
	if GetCustomItemId({_item}) is "dragonscale":
		return "dragonscale"
	if "%{_item}%" contains "amethyst":
		if {_item} is not tagged with minecraft tag "enchantable":
			return "gem"
	if {_item} is diamond or emerald or ender pearl or ender eye or emerald block or diamond block or nether star or end crystal:
		return "gem"
	if {_item} is arrow or spectral arrow or tipped arrow or stick or bamboo or sugar cane or torch or redstone torch or soul torch or ladder or painting or bowl:
		if GetCustomItemId({_item}) is not set:
			return "stick"
	if GetCustomItemId({_item}) is "silkscourge_arrow":
		return "stick"
	if GetCustomItemId({_item}) is "silkscourge_vial":
		return "potion"
	
	if {_item} is redstone block or lapis block or netherite block:
		return "metal"
	if {_item} is copper block or waxed copper block:
		return "metal"
	if {_item} is grass block or dirt or coarse dirt or rooted dirt or podzol or mycelium or dirt path or moss block or moss carpet:
		set {_type} to "grass"
	if {_item} is mud or packed mud or muddy mangrove roots:
		set {_type} to "wet"
	if {_item} is sand or red sand:
		set {_type} to "sand"
	if {_item} is tagged with minecraft tag "concrete_powder":
		set {_type} to "sand"
	
	if {_item} is tagged with minecraft tag "mineable/axe":
		set {_type} to "wood"
	if {_item} is tagged with minecraft tag "beds":
		set {_type} to "wood"
	if {_item} is tagged with minecraft tag "boats":
		set {_type} to "wood"
	if {_item} is lectern or chest or barrel:
		set {_type} to "wood"
#	if {_item} is any stone or cobblestone or any terracotta or any glazed terracotta or any concrete or any sandstone or stone stairs or any shulker box:
	if {_item} is tagged with minecraft tag "mineable/pickaxe":
		if {_item} is not tagged with minecraft tag "enchantable":
			set {_type} to "stone"

	if {_item} is tagged with paper tag "glass":
		set {_type} to "ceramic"
	if {_item} is tagged with paper tag "glass_panes":
		set {_type} to "ceramic"
	if {_item} is brick or nether brick or glass bottle or decorated pot or flower pot or lightning rod:#resin brick
		set {_type} to "ceramic"
	if {_item} is tagged with minecraft tag "decorated_pot_ingredients":
		set {_type} to "ceramic"
	if {_item} is tagged with minecraft tag "wool_carpets":
		set {_type} to "wool"
	if {_item} is tagged with minecraft tag "wool":
		set {_type} to "wool"

	if {_item} is bone:
		set {_type} to "bone"
	if {_item} is egg item or turtle egg or sniffer egg:
		set {_type} to "egg"
	if {_item} is elytra:
		set {_type} to "elytra"

	if {_item} is tagged with minecraft tag "skript:food":
		set {_type} to "food"
	if {_item} is wheat seeds or pumpkin seeds or melon seeds or beetroot seeds:
		set {_type} to "plant"
	if {_item} is tagged with minecraft tag "crops":
		set {_type} to "plant"
	if {_item} is tagged with minecraft tag "flowers":
		set {_type} to "plant"
	if {_item} is tagged with minecraft tag "leaves":
		set {_type} to "plant"
	if {_item} is tagged with minecraft tag "saplings":
		set {_type} to "plant"
	if {_item} is tagged with minecraft tag "mushrooms":
		set {_type} to "plant"
	if {_item} is tagged with minecraft tag "coral_blocks":
		set {_type} to "plant"
	if {_item} is tagged with minecraft tag "corals":
		set {_type} to "plant"
	if {_item} is tagged with minecraft tag "coral_fans":
		set {_type} to "plant"
	if {_item} is tagged with minecraft tag "dyes":
		set {_type} to "plant"
	if {_item} is crimson fungus or warped fungus or cactus or crimson roots or warped roots or nether sprouts or weeping vines or twisting vines or vine or hay block or nether wart or bone meal or mangrove roots:
		set {_type} to "plant"
	if {_item} is tagged with minecraft tag "ores":
		set {_type} to "ore"
	if {_item} is tagged with minecraft tag "raw_ore_blocks":
		set {_type} to "ore"
	if {_item} is netherite scrap or coal or charcoal or gold nugget or iron nugget or flint or quartz or prismarine shard or prismarine crystals or resin clump or lapis lazuli:
		set {_type} to "ore"
	if {_item} is any potion or ominous bottle or honey bottle or experience bottle or dragon breath:
		set {_type} to "potion"
	if {_item} is water bucket or cod bucket or salmon bucket or tropical fish bucket or pufferfish bucket or axolotl bucket or tadpole bucket:
		set {_type} to "potion"
	if {_item} is bottle o' enchanting:
		set {_type} to "experience_bottle"
	if {_item} is tagged with minecraft tag "buckets":
		set {_type} to "liquid"
	if {_item} is bucket:
		set {_type} to "metal"
	if {_item} is enchanted book or enchantment table:
		set {_type} to "enchanted"
	if {_item} is redstone or sugar or blaze powder or gunpowder:
		set {_type} to "powder"
	if {forge::accessories_list::*} contains GetCustomItemId({_item}):
		set {_type} to "accessory"
	return {_type}

function PlayItemSound(player: player, item: string, armor: boolean = false):
	if {sounds::inventory_sounds} is not true:
		stop
#	if difference between metadata value "item_sound_date" of {_player} and now <= 1 tick:
#		stop
#	set metadata value "item_sound_date" of {_player} to now
	if {_item} is "unknown":
		play sound "item.bundle.drop_contents" with volume 0.5 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "dragonscale":
		play sound "block.nether_bricks.break" with volume 0.3 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "backpack":
		play sound "item.armor.equip_leather" with volume 0.5 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "tool":
		play sound "item.armor.equip_iron" with volume 0.5 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "metal":
		play sound "item.armor.equip_iron" with volume 0.5 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "accessory":
		play sound "item.armor.equip_gold" with volume 0.5 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "gem":
		play sound "block.amethyst_block.fall" with volume 1 and pitch random number between 0.8 and 1.2 to {_player}

	if {_item} is "grass":
		play sound "block.grass.place" with volume 0.4 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "sand":
		play sound "block.sand.place" with volume 0.4 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "wood":
		play sound "block.wood.place" with volume 0.6 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "stick":
		if GetCustomItemId({_item}) is not set:
			play sound "block.bamboo.break" with volume 0.6 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "stone":
#		play sound "block.stone.place" with volume 0.6 and pitch random number between 0.8 and 1.2 to {_player}
		play sound "block.deepslate.place" with volume 0.6 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "food":
		play sound "custom.items.food_item" with volume 0.2 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "plant":
		play sound "block.crop.break" with volume 0.6 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "ore":
		play sound "block.nether_gold_ore.fall" with volume 0.6 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "wool":
		play sound "block.wool.fall" with volume 0.6 and pitch random number between 0.8 and 1.2 to {_player}

	if {_item} is "ceramic":
		play sound "block.decorated_pot.insert_fail" with volume 0.6 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "potion":
		play sound "item.bottle.empty" with volume 0.6 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "experience_bottle":
		play sound "item.bottle.empty" with volume 0.4 and pitch random number between 0.8 and 1.2 to {_player}
		play sound "block.enchantment_table.use" with volume 0.2 and pitch random number between 1.8 and 2 to {_player}
	if {_item} is "liquid":
		play sound "item.bucket.empty" with volume 0.6 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "bone":
		play sound "block.note_block.xylophone" with volume 0.6 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "egg":
		play sound "entity.chicken.egg" with volume 0.4 and pitch random number between 1 and 1.4 to {_player}
	if {_item} is "elytra":
		play sound "item.armor.equip_wolf" with volume 0.5 and pitch random number between 0.8 and 1.2 to {_player}
	if {_item} is "enchanted":
		play sound "block.enchantment_table.use" with volume 0.3 and pitch random number between 1.8 and 2 to {_player}
	if {_item} is "powder":
		play sound "minecraft:item.brush.brushing.sand.complete" with volume 1 and pitch random number between 1.2 and 1.4 to {_player}





command /premiumpurchasesound [<player>]:
	permission: admin
	trigger:
		play sound "custom.purchase_complete" with volume 0.4 and pitch 1 to player-arg

command /itempurchasesound [<player>]:
	permission: admin
	trigger:
		play sound "custom.purchase_item" with volume 0.2 and pitch 1 to player-arg

command /itemsellsound [<player>]:
	permission: admin
	trigger:
		play sound "custom.sell_item" with volume 0.2 and pitch 1 to player-arg



